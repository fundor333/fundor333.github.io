[{"type": "entry", "author": {"type": "card", "name": "benji", "photo": "https://avatars.webmention.io/www.benji.dog/98f50ccee2f72b224906440e0a78cc1fa5ea016ae65e5fa0d42ff5000ad29d24.jpg", "url": "https://www.benji.dog"}, "url": "https://www.benji.dog/articles/git-config/", "published": "2024-11-22T00:00:00", "wm-received": "2024-11-23T05:32:56Z", "wm-id": 1861724, "wm-source": "https://www.benji.dog/articles/git-config/", "wm-target": "https://fundor333.com/post/2021/advance-git-config-and-ssh-config/", "wm-protocol": "webmention", "name": "How I configure my Git identities", "summary": {"content-type": "text/plain", "value": "This may be overkill, but it works on my machine"}, "content": {"html": "<blockquote>\n<p><strong>Note</strong>: I've had this post drafted for 3 YEARS!!! It's finally time to publish it.</p>\n</blockquote>\n<p>I like to mess with my <a href=\"https://github.com/benjifs/dotfiles\">dotfiles</a> and every so often, I find out about a new way to do things and I spend more time than I should learning how to use it.</p>\n<p>A few years ago I learned about <a href=\"https://git-scm.com/docs/git-config#_includes\">includeIf</a> for including specific files if some condition was met for <code>git</code>. The example that I first saw was doing:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c11l1\"></a>[includeIf \"gitdir:~/code/**\"]<a href=\"https://www.benji.dog/articles/git-config/#c11l2\"></a>  path = ~/.config/git/personal<a href=\"https://www.benji.dog/articles/git-config/#c11l3\"></a>[includeIf \"gitdir:~/work/**\"]<a href=\"https://www.benji.dog/articles/git-config/#c11l4\"></a>  path = ~/.config/git/work</code></pre><p>So that <code>~/.config/git/personal</code> is only included for <code>git</code> directories under <code>~/code</code> and <code>~/.config/git/work</code> is only included for directories under <code>~/work</code>. The contents of those included files varies but usually it contains your git identity, signing keys, etc. Here's an example of what that could look like:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c15l1\"></a>[user]<a href=\"https://www.benji.dog/articles/git-config/#c15l2\"></a>  name = benji<a href=\"https://www.benji.dog/articles/git-config/#c15l3\"></a>  email = benji@work.com<a href=\"https://www.benji.dog/articles/git-config/#c15l4\"></a>  signingkey = ~/.ssh/work.id_ed25519.pub</code></pre><p>That works pretty well but I usually organize all my code in <code>~/workspace</code> regardless of whether its personal, <strong>work-1</strong>, <strong>work-2</strong>, etc. I wanted to be able to configure git depending on where that repo actually lives instead of where the directory is in my machine. Then I found out about <a href=\"https://git-scm.com/docs/git-config#Documentation/git-config.txt-codehasconfigremoteurlcode\">hasconfig:remote.*.url:</a>!</p>\n<p>This makes it so that I can configure git conditionally if the given remote URL exists for that directory I'm currently working in.</p>\n<p>A few examples of what I do is:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c25l1\"></a>[includeIf \"hasconfig:remote.*.url:git@github.com:*/**\"]<a href=\"https://www.benji.dog/articles/git-config/#c25l2\"></a>  path = ~/.config/git/config-gh<a href=\"https://www.benji.dog/articles/git-config/#c25l3\"></a><a href=\"https://www.benji.dog/articles/git-config/#c25l4\"></a>[includeIf \"hasconfig:remote.*.url:git@github.com:orgname/**\"]<a href=\"https://www.benji.dog/articles/git-config/#c25l5\"></a>  path = ~/.config/git/config-gh-org<a href=\"https://www.benji.dog/articles/git-config/#c25l6\"></a><a href=\"https://www.benji.dog/articles/git-config/#c25l7\"></a>[includeIf \"hasconfig:remote.*.url:git@gitlab.com:*/**\"]<a href=\"https://www.benji.dog/articles/git-config/#c25l8\"></a>  path = ~/.config/git/config-gl<a href=\"https://www.benji.dog/articles/git-config/#c25l9\"></a><a href=\"https://www.benji.dog/articles/git-config/#c25l10\"></a>[includeIf \"hasconfig:remote.*.url:git@git.sr.ht:*/**\"]<a href=\"https://www.benji.dog/articles/git-config/#c25l11\"></a>  path = ~/.config/git/config-srht</code></pre><blockquote>\n<p><strong>???? EDIT</strong>: The order of these matter as git will include the <strong>last</strong> matching config. In this case, <code>github.com:orgname/**</code> has to go below the general <code>github:*/**</code> otherwise the default github config will overwrite the one for <code>orgname</code>. Thanks catching this typo Fede.</p>\n</blockquote>\n<p>Now if I'm in a directory where the remote matches <code>github.com:orgname/**</code> it would use <code>~/.config/git/config-gh-org</code>, otherwise it uses the general config file for any other GitHub repo.</p>\n<p>While that handles git identities, I still need to configure SSH keys separately to be able to <code>pull</code> and <code>push</code> to remotes. The simple version of my <code>~/.ssh/config</code> looks like this:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c38l1\"></a>Host gitlab.com<a href=\"https://www.benji.dog/articles/git-config/#c38l2\"></a>Hostname gitlab.com<a href=\"https://www.benji.dog/articles/git-config/#c38l3\"></a>User git<a href=\"https://www.benji.dog/articles/git-config/#c38l4\"></a>IdentityFile ~/.ssh/gitlab.id_ed25519<a href=\"https://www.benji.dog/articles/git-config/#c38l5\"></a><a href=\"https://www.benji.dog/articles/git-config/#c38l6\"></a>Host github.com<a href=\"https://www.benji.dog/articles/git-config/#c38l7\"></a>Hostname github.com<a href=\"https://www.benji.dog/articles/git-config/#c38l8\"></a>User git<a href=\"https://www.benji.dog/articles/git-config/#c38l9\"></a>IdentityFile ~/.ssh/github.id_ed25519</code></pre><blockquote>\n<p><strong>???? EDIT</strong>: Depending on how your <code>ssh-agent</code> is configured, it may be a good idea to add <code>IdentitiesOnly yes</code> after the <code>IdentityFile</code> line for each <code>Host</code> in you <code>~/.ssh/config</code>. Thanks for the heads up Jorge.</p>\n</blockquote>\n<p>The only problem with this is that in order to use a different <code>IdentityFile</code> for the same <code>Hostname</code> so that I could use a different key for repos under <code>github.com/orgname</code>, I'd have to use a different value for <code>Host</code>. So in my case I would add the following to my <code>~/.ssh/config</code>:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c47l1\"></a>Host gh-work<a href=\"https://www.benji.dog/articles/git-config/#c47l2\"></a>Hostname github.com<a href=\"https://www.benji.dog/articles/git-config/#c47l3\"></a>User git<a href=\"https://www.benji.dog/articles/git-config/#c47l4\"></a>IdentityFile ~/.ssh/work.id_ed25519</code></pre><p>Finally, to use that <code>Host</code> when I'm looking for a repo in <code>github.com/orgname</code>, I would add the following to my git config:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c51l1\"></a>[url \"gh-work:orgname\"]<a href=\"https://www.benji.dog/articles/git-config/#c51l2\"></a>  insteadOf = git@github.com:orgname</code></pre><p>So when I <code>clone</code>, <code>pull</code>, or <code>push</code> a repo that's under my work's org account I can do:</p>\n<pre><code><a href=\"https://www.benji.dog/articles/git-config/#c55l1\"></a>git clone git@github.com:orgname/project</code></pre><p>and <code>insteadOf</code> would replace <code>github.com:orgname</code> with <code>gh-work:orgname</code> so that it uses the right info from my SSH config. It's a neat trick which I saw referenced in this <a href=\"https://www.kenmuse.com/blog/ssh-and-multiple-git-credentials/#git\">article</a>.</p>\n<p>Are there any issues with this approach? Is there a better way to do this? I'm not sure so please let me know as I'd love to learn and I'll update this post accordingly.</p>\n<h2>References</h2>\n<ul><li><a href=\"https://fundor333.com/post/2021/advance-git-config-and-ssh-config/\">https://fundor333.com/post/2021/advance-git-config-and-ssh-config/</a></li>\n<li><a href=\"https://www.kenmuse.com/blog/ssh-and-multiple-git-credentials/#git\">https://www.kenmuse.com/blog/ssh-and-multiple-git-credentials/#git</a></li>\n<li><a href=\"https://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities\">https://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities</a></li>\n<li><a href=\"https://stevenharman.net/configure-ssh-keys-for-multiple-github-accounts\">https://stevenharman.net/configure-ssh-keys-for-multiple-github-accounts</a></li>\n</ul>", "text": "Note: I've had this post drafted for 3 YEARS!!! It's finally time to publish it.\n\nI like to mess with my dotfiles and every so often, I find out about a new way to do things and I spend more time than I should learning how to use it.\nA few years ago I learned about includeIf for including specific files if some condition was met for git. The example that I first saw was doing:\n[includeIf \"gitdir:~/code/**\"]  path = ~/.config/git/personal[includeIf \"gitdir:~/work/**\"]  path = ~/.config/git/workSo that ~/.config/git/personal is only included for git directories under ~/code and ~/.config/git/work is only included for directories under ~/work. The contents of those included files varies but usually it contains your git identity, signing keys, etc. Here's an example of what that could look like:\n[user]  name = benji  email = benji@work.com  signingkey = ~/.ssh/work.id_ed25519.pubThat works pretty well but I usually organize all my code in ~/workspace regardless of whether its personal, work-1, work-2, etc. I wanted to be able to configure git depending on where that repo actually lives instead of where the directory is in my machine. Then I found out about hasconfig:remote.*.url:!\nThis makes it so that I can configure git conditionally if the given remote URL exists for that directory I'm currently working in.\nA few examples of what I do is:\n[includeIf \"hasconfig:remote.*.url:git@github.com:*/**\"]  path = ~/.config/git/config-gh[includeIf \"hasconfig:remote.*.url:git@github.com:orgname/**\"]  path = ~/.config/git/config-gh-org[includeIf \"hasconfig:remote.*.url:git@gitlab.com:*/**\"]  path = ~/.config/git/config-gl[includeIf \"hasconfig:remote.*.url:git@git.sr.ht:*/**\"]  path = ~/.config/git/config-srht\n???? EDIT: The order of these matter as git will include the last matching config. In this case, github.com:orgname/** has to go below the general github:*/** otherwise the default github config will overwrite the one for orgname. Thanks catching this typo Fede.\n\nNow if I'm in a directory where the remote matches github.com:orgname/** it would use ~/.config/git/config-gh-org, otherwise it uses the general config file for any other GitHub repo.\nWhile that handles git identities, I still need to configure SSH keys separately to be able to pull and push to remotes. The simple version of my ~/.ssh/config looks like this:\nHost gitlab.comHostname gitlab.comUser gitIdentityFile ~/.ssh/gitlab.id_ed25519Host github.comHostname github.comUser gitIdentityFile ~/.ssh/github.id_ed25519\n???? EDIT: Depending on how your ssh-agent is configured, it may be a good idea to add IdentitiesOnly yes after the IdentityFile line for each Host in you ~/.ssh/config. Thanks for the heads up Jorge.\n\nThe only problem with this is that in order to use a different IdentityFile for the same Hostname so that I could use a different key for repos under github.com/orgname, I'd have to use a different value for Host. So in my case I would add the following to my ~/.ssh/config:\nHost gh-workHostname github.comUser gitIdentityFile ~/.ssh/work.id_ed25519Finally, to use that Host when I'm looking for a repo in github.com/orgname, I would add the following to my git config:\n[url \"gh-work:orgname\"]  insteadOf = git@github.com:orgnameSo when I clone, pull, or push a repo that's under my work's org account I can do:\ngit clone git@github.com:orgname/projectand insteadOf would replace github.com:orgname with gh-work:orgname so that it uses the right info from my SSH config. It's a neat trick which I saw referenced in this article.\nAre there any issues with this approach? Is there a better way to do this? I'm not sure so please let me know as I'd love to learn and I'll update this post accordingly.\nReferences\nhttps://fundor333.com/post/2021/advance-git-config-and-ssh-config/\nhttps://www.kenmuse.com/blog/ssh-and-multiple-git-credentials/#git\nhttps://garrit.xyz/posts/2023-10-13-organizing-multiple-git-identities\nhttps://stevenharman.net/configure-ssh-keys-for-multiple-github-accounts"}, "mention-of": "https://fundor333.com/post/2021/advance-git-config-and-ssh-config/", "wm-property": "mention-of", "wm-private": false, "rels": {"canonical": "https://benji.dog/articles/git-config/"}}]